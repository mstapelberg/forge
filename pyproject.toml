# pyproject.toml
[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "forge"
version = "0.1.0"
description = "FORGE (Flexible Optimizer for Rapid Generation and Exploration) - A package for adversarial attacks, HPC workflows, and materials analysis"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    { name = "Myles Stapelberg", email = "myless@mit.edu" }
]
# homepage = "https://github.com/mstapelberg/forge"
keywords = ["materials", "adversarial", "hpc", "database", "analysis"]

# Python requirement (adjust as needed)
requires-python = ">=3.11"

# Core runtime dependencies
dependencies = [
    "numpy>=1.21",
    "matplotlib",
    "ase>=3.22",
    "scipy",
    "scikit-learn",
    "pyyaml",
    "psycopg2-binary",
    "pymatgen",
    "monty",
    "plotly",
    "tqdm"
]

[tool.setuptools]
packages = ["forge"]

# Optional dependencies (e.g. for testing) can be specified in optional-dependencies
[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "umap-learn",
    "wandb"
]

[project.urls]
"Source Code" = "https://github.com/mstapelberg/forge"
"Documentation" = "https://github.com/mstapelberg/forge/docs"
"Tracker" = "https://github.com/mstapelberg/forge/issues"


[tool.ruff]
include = ["**/pyproject.toml", "*.ipynb", "*.py", "*.pyi"]
exclude = ["__init__.py", "migrations/*.py", "allxyz_lastgrad.py", "mopac_ints_rhf.py", "dbsettings.py"]
line-length = 100
src = [".", "djangochem"]

[tool.ruff.format]
docstring-code-format = true

# borrowed lint rules from chgnet
[tool.ruff.lint]
# consider selecting "ISC", for implicit string concat
# consider selecting "T201", for print in production code
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle error
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FLY",  # flynt
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "PD",   # pandas-vet
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PYI",  # flakes8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flakes8-slot
    "TCH",  # flake8-type-checking
    "TID",  # tidy imports
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
    "YTT",  # flake8-2020
]
# also consider ignoring "C901", for high mccabe function complexity
# also consider ignoring "ERA001", for found commented out code
ignore = [
    "ANN003",  # missing type annotations for kwargs
    "B019",    # Use of functools.lru_cache on methods can lead to memory leaks
    "C408",    # unnecessary-collection-call
    "COM812",  # trailing comma missing
    "D205",    # 1 blank line required between summary line and description
    "D415",    # first line of docstring must end with punctuation
    "DTZ005",  # use of datetime.now() without timezone
    "E731",    # do not assign a lambda expression, use a def
    "EM",      # flake8-errmsg
    "FBT001",  # Boolean positional argument in function
    "FBT002",  # Boolean keyword argument in function
    "NPY002",  # TODO replace legacy np.random.seed
    "PLR",     # pylint refactor
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT009",   # pytest-unittest-assertion
    "PT011",   # pytest-raises-too-broad
    "PT013",   # pytest-incorrect-pytest-import
    "PT019",   # pytest-fixture-param-without-value
    "PTH",     # prefer Path to os.path
    "S301",    # pickle can be unsafe
    "S310",    # url open functions can be unsafe
    "TRY003",  # long exception messages not defined in the exception class itself
    "UP015",   # unnecessary "r" in open call
]
pydocstyle.convention = "google"
